<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>沉睡的季节个人博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="/"/>
  <updated>2019-05-20T09:35:50.841Z</updated>
  <id>/</id>
  
  <author>
    <name>kakrot</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>我的开发仓库</title>
    <link href="/2019/05/20/%E6%88%91%E7%9A%84%E5%BC%80%E5%8F%91%E4%BB%93%E5%BA%93/"/>
    <id>/2019/05/20/我的开发仓库/</id>
    <published>2019-05-20T06:35:20.000Z</published>
    <updated>2019-05-20T09:35:50.841Z</updated>
    
    <content type="html"><![CDATA[<h3 id="仓库"><a href="#仓库" class="headerlink" title="仓库"></a>仓库</h3><p><a href="https://rdc.aliyun.com/" target="_blank" rel="noopener">https://rdc.aliyun.com/</a><br><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">allprojects &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        maven &#123;</span><br><span class="line">            url <span class="hljs-string">'https://maven.aliyun.com/repository/public'</span></span><br><span class="line">        &#125;</span><br><span class="line">        maven &#123;</span><br><span class="line">            credentials &#123;</span><br><span class="line">                username <span class="hljs-string">'XCkvR2'</span></span><br><span class="line">                password <span class="hljs-string">'gtLD60Rgku'</span></span><br><span class="line">            &#125;</span><br><span class="line">            url <span class="hljs-string">'https://repo.rdc.aliyun.com/repository/69789-release-2uR2Yk/'</span></span><br><span class="line">        &#125;</span><br><span class="line">        maven &#123;</span><br><span class="line">            credentials &#123;</span><br><span class="line">                username <span class="hljs-string">'XCkvR2'</span></span><br><span class="line">                password <span class="hljs-string">'gtLD60Rgku'</span></span><br><span class="line">            &#125;</span><br><span class="line">            url <span class="hljs-string">'https://repo.rdc.aliyun.com/repository/69789-snapshot-8Y8wCL/'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="mvp"><a href="#mvp" class="headerlink" title="mvp"></a>mvp</h3><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">implementation <span class="hljs-string">"org.kakrot.mvp:mvp:1.0"</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;仓库&quot;&gt;&lt;a href=&quot;#仓库&quot; class=&quot;headerlink&quot; title=&quot;仓库&quot;&gt;&lt;/a&gt;仓库&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://rdc.aliyun.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https
      
    
    </summary>
    
      <category term="repository" scheme="/categories/repository/"/>
    
    
      <category term="android" scheme="/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>阿里巴巴Java开发手册</title>
    <link href="/2019/05/20/%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4Java%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C/"/>
    <id>/2019/05/20/阿里巴巴Java开发手册/</id>
    <published>2019-05-20T03:40:18.000Z</published>
    <updated>2019-05-20T09:35:50.842Z</updated>
    
    <content type="html"><![CDATA[<p><a href="/download/阿里巴巴java开发手册.pdf">点击下载</a><br><div class="row">    <embed src="/download/阿里巴巴java开发手册.pdf" width="100%" height="550" type="application/pdf"></div></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;/download/阿里巴巴java开发手册.pdf&quot;&gt;点击下载&lt;/a&gt;&lt;br&gt;

	&lt;div class=&quot;row&quot;&gt;
    &lt;embed src=&quot;/download/阿里巴巴java开发手册.pdf&quot; width=&quot;100%&quot; height=&quot;55
      
    
    </summary>
    
      <category term="阿里巴巴Java开发手册" scheme="/categories/%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4Java%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C/"/>
    
    
      <category term="java" scheme="/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>阿里巴巴Android开发手册</title>
    <link href="/2019/05/20/%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4Android%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C/"/>
    <id>/2019/05/20/阿里巴巴Android开发手册/</id>
    <published>2019-05-20T03:37:59.000Z</published>
    <updated>2019-05-20T09:35:50.842Z</updated>
    
    <content type="html"><![CDATA[<p><a href="/download/阿里巴巴android开发手册.pdf">点击下载</a><br><div class="row">    <embed src="/download/阿里巴巴android开发手册.pdf" width="100%" height="550" type="application/pdf"></div></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;/download/阿里巴巴android开发手册.pdf&quot;&gt;点击下载&lt;/a&gt;&lt;br&gt;

	&lt;div class=&quot;row&quot;&gt;
    &lt;embed src=&quot;/download/阿里巴巴android开发手册.pdf&quot; width=&quot;100%&quot; heig
      
    
    </summary>
    
      <category term="阿里巴巴Android开发手册" scheme="/categories/%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4Android%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C/"/>
    
    
      <category term="android" scheme="/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>Android MVP架构</title>
    <link href="/2019/05/20/Android-MVP%E6%9E%B6%E6%9E%84/"/>
    <id>/2019/05/20/Android-MVP架构/</id>
    <published>2019-05-20T02:22:05.000Z</published>
    <updated>2019-05-20T09:35:50.831Z</updated>
    
    <content type="html"><![CDATA[<p>Model-View-Presenter是一个分离关注点的软件架构。Presenter作为Model和View之间的桥梁，用于演示业务逻辑。<br><img src="/2019/05/20/Android-MVP架构/20160522153041711.jpeg"><br><a id="more"></a></p><h3 id="View"><a href="#View" class="headerlink" title="View"></a>View</h3><p>对于View层也是视图层，在View层中只负责对数据的展示，提供友好的界面与用户进行交互。在Android开发中通常将Activity或者Fragment作为View层。</p><h3 id="Presenter"><a href="#Presenter" class="headerlink" title="Presenter"></a>Presenter</h3><p>对于Presenter层他是连接View层与Model层的桥梁并对业务逻辑进行处理。在MVP架构中Model与View无法直接进行交互。所以在Presenter层它会从Model层获得所需要的数据，进行一些适当的处理后交由View层进行显示。这样通过Presenter将View与Model进行隔离，使得View和Model之间不存在耦合，同时也将业务逻辑从View中抽离。</p><h3 id="Model"><a href="#Model" class="headerlink" title="Model"></a>Model</h3><p>对于Model层也是数据层。它区别于MVC架构中的Model，在这里不仅仅只是数据模型。在MVP架构中Model它负责对数据的存取操作，例如对数据库的读写，网络的数据的请求等。</p><p>注意点：</p><pre><code>View不与Model直接交互，而是通过与Presenter交互来与Model间接交互。Presenter与View的交互是通过接口来进行的，更有利于添加单元测试通常View与Presenter是一对一的，但复杂的View可能绑定多个Presenter来处理逻辑。</code></pre><img src="/2019/05/20/Android-MVP架构/1G020140036-5C1-7.jpeg">]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Model-View-Presenter是一个分离关注点的软件架构。Presenter作为Model和View之间的桥梁，用于演示业务逻辑。&lt;br&gt;&lt;img src=&quot;/2019/05/20/Android-MVP架构/20160522153041711.jpeg&quot;&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="mvp" scheme="/categories/mvp/"/>
    
    
      <category term="android" scheme="/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>Android弹出软键盘android:windowSoftInputMode设置</title>
    <link href="/2019/05/20/Android%E5%BC%B9%E5%87%BA%E8%BD%AF%E9%94%AE%E7%9B%98android-windowSoftInputMode%E8%AE%BE%E7%BD%AE/"/>
    <id>/2019/05/20/Android弹出软键盘android-windowSoftInputMode设置/</id>
    <published>2019-05-20T01:56:58.000Z</published>
    <updated>2019-05-20T09:35:50.839Z</updated>
    
    <content type="html"><![CDATA[<p>当在Android的layout设计里面如果输入框过多，则在输入弹出软键盘的时候，下面的输入框会有一部分被软件盘挡住，从而不能获取焦点输入。或者是有使用FrameLayout悬浮在底部的Button也会挡住输入框。<br><a id="more"></a><br>方法一：</p><pre><code>在你的activity中的onCreate中setContentView之前写上这个代码getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_ADJUST_PAN);</code></pre><p>方法二：</p><pre><code>在项目的AndroidManifest.xml文件中界面对应的&lt;activity&gt;里加入android:windowSoftInputMode=&quot;stateVisible|adjustResize&quot;，这样会让屏幕整体上移。如果加上的 android:windowSoftInputMode=&quot;adjustPan&quot;这样键盘就会覆盖屏幕。</code></pre><p>方法三：</p><pre><code>把顶级的layout替换成ScrollView，或者说在顶级的Layout上面再加一层ScrollView的封装。这样就会把软键盘和输入框一起滚动了，软键盘会一直处于底部。</code></pre><h3 id="stateUnspecified"><a href="#stateUnspecified" class="headerlink" title="stateUnspecified"></a>stateUnspecified</h3><p>软键盘的状态(是否它是隐藏或可见)没有被指定。系统将选择一个合适的状态或依赖于主题的设置。这个是为了软件盘行为默认的设置。</p><h3 id="stateUnchanged"><a href="#stateUnchanged" class="headerlink" title="stateUnchanged"></a>stateUnchanged</h3><p>软键盘被保持无论它上次是什么状态，是否可见或隐藏，当主窗口出现在前面时。</p><h3 id="stateHidden"><a href="#stateHidden" class="headerlink" title="stateHidden"></a>stateHidden</h3><p>当用户选择该Activity时，软键盘被隐藏——也就是，当用户确定导航到该Activity时，而不是返回到它由于离开另一个Activity。</p><h3 id="stateAlwaysHidden"><a href="#stateAlwaysHidden" class="headerlink" title="stateAlwaysHidden"></a>stateAlwaysHidden</h3><p>软键盘总是被隐藏的，当该Activity主窗口获取焦点时。</p><h3 id="stateVisible"><a href="#stateVisible" class="headerlink" title="stateVisible"></a>stateVisible</h3><p>软键盘是可见的，当那个是正常合适的时(当用户导航到Activity主窗口时)。</p><h3 id="stateAlwaysVisible"><a href="#stateAlwaysVisible" class="headerlink" title="stateAlwaysVisible"></a>stateAlwaysVisible</h3><p>当用户选择这个Activity时，软键盘是可见的——也就是当用户确定导航到该Activity时，而不是返回到它由于离开另一个Activity。</p><h3 id="adjustUnspecified"><a href="#adjustUnspecified" class="headerlink" title="adjustUnspecified"></a>adjustUnspecified</h3><p>它不被指定是否该Activity主窗口调整大小以便留出软键盘的空间，或是否窗口上的内容得到屏幕上当前的焦点是可见的。系统将自动选择这些模式中一种主要依赖于是否窗口的内容有任何布局视图能够滚动他们的内容。如果有这样的一个视图，这个窗口将调整大小，这样的假设可以使滚动窗口的内容在一个较小的区域中可见的。这个是主窗口默认的行为设置。</p><h3 id="adjustResize"><a href="#adjustResize" class="headerlink" title="adjustResize"></a>adjustResize</h3><p>该Activity主窗口总是被调整屏幕的大小以便留出软键盘的空间</p><h3 id="adjustPan"><a href="#adjustPan" class="headerlink" title="adjustPan"></a>adjustPan</h3><p>该Activity主窗口并不调整屏幕的大小以便留出软键盘的空间。相反，当前窗口的内容将自动移动以便当前焦点从不被键盘覆盖和用户能总是看到输入内容的部分。这个通常是不期望比调整大小，因为用户可能关闭软键盘以便获得与被覆盖内容的交互操作。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;当在Android的layout设计里面如果输入框过多，则在输入弹出软键盘的时候，下面的输入框会有一部分被软件盘挡住，从而不能获取焦点输入。或者是有使用FrameLayout悬浮在底部的Button也会挡住输入框。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="android软键盘" scheme="/categories/android%E8%BD%AF%E9%94%AE%E7%9B%98/"/>
    
    
      <category term="android" scheme="/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>Android软键盘的显示和隐藏InputMethodManager</title>
    <link href="/2019/05/20/Android%E8%BD%AF%E9%94%AE%E7%9B%98%E7%9A%84%E6%98%BE%E7%A4%BA%E5%92%8C%E9%9A%90%E8%97%8FInputMethodManager/"/>
    <id>/2019/05/20/Android软键盘的显示和隐藏InputMethodManager/</id>
    <published>2019-05-20T01:40:33.000Z</published>
    <updated>2019-05-20T09:35:50.839Z</updated>
    
    <content type="html"><![CDATA[<p>如果有需要用到输入的地方，通常会有需要自动弹出或者收起软键盘的需求。想要操作软键盘，需要使用到 InputMethodManager ，它是一个系统服务，可以使用 Context.getSystemService() 获取到它。而很多关键的逻辑代码，都是在 InputMethodManagerService 中实现的。<br><a id="more"></a></p><h3 id="显示软键盘"><a href="#显示软键盘" class="headerlink" title="显示软键盘"></a>显示软键盘</h3><p>在 InputMethodManager 中，有两个方法 showSoftInput() 和 showSoftInputFromInputMethod() ，而实际上，只有 showSoftInput() 是有效的。它有两个重载方法，而通常我们会使用它的两个参数的方法。<br><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Synonym <span class="hljs-keyword">for</span> &#123;@link <span class="hljs-comment">#showSoftInput(View, int, ResultReceiver)&#125; without</span></span><br><span class="line"> * a result receiver: explicitly request that the current input method<span class="hljs-string">'s</span></span><br><span class="line"><span class="hljs-string"> * soft input area be shown to the user, if needed.</span></span><br><span class="line"><span class="hljs-string"> *</span></span><br><span class="line"><span class="hljs-string"> * @param view The currently focused view, which would like to receive</span></span><br><span class="line"><span class="hljs-string"> * soft keyboard input.</span></span><br><span class="line"><span class="hljs-string"> * @param flags Provides additional operating flags.  Currently may be</span></span><br><span class="line"><span class="hljs-string"> * 0 or have the &#123;@link #SHOW_IMPLICIT&#125; bit set.</span></span><br><span class="line"><span class="hljs-string"> */</span></span><br><span class="line"><span class="hljs-string">public boolean showSoftInput(View view, int flags) &#123;</span></span><br><span class="line"><span class="hljs-string">    return showSoftInput(view, flags, null);</span></span><br><span class="line"><span class="hljs-string">&#125;</span></span><br></pre></td></tr></table></figure></p><p>这里我们只需要传递两个参数。它首先需要一个 View ，使用软键盘就是为了输入，而输入就需要有接收输入内容的 View ，这里接收输入的 View ，最好是一个 EditText（但这不是必须的）。<br>而第二个参数 flags 就是个标志位，直接传0即可。<br>在 onCreate() 中，如果立即调用 showSoftInput() 是不会生效的。想要在页面一启动的时候就弹出键盘，可以在 Activity 上，设置 android:windowSoftInputMode 属性来完成，或者做一个延迟加载，View.postDelayed() 也是一个解决方案。</p><h3 id="隐藏软键盘"><a href="#隐藏软键盘" class="headerlink" title="隐藏软键盘"></a>隐藏软键盘</h3><p>虽然 showSoftInput() 方法是有效的，但是想要隐藏软键盘，就没有提供对应的 hideSoftInput() 方法，但是却有一个 hideSoftInputFromWindow() 方法，可以用来隐藏软键盘。<br><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Synonym <span class="hljs-keyword">for</span> &#123;@link <span class="hljs-comment">#hideSoftInputFromWindow(IBinder, int, ResultReceiver)&#125;</span></span><br><span class="line"> * without a result: request to hide the soft input window from the</span><br><span class="line"> * context of the window that is currently accepting input.</span><br><span class="line"> *</span><br><span class="line"> * @param windowToken The token of the window that is making the request,</span><br><span class="line"> * as returned by &#123;@link View<span class="hljs-comment">#getWindowToken() View.getWindowToken()&#125;.</span></span><br><span class="line"> * @param flags Provides additional operating flags.  Currently may be</span><br><span class="line"> * 0 or have the &#123;@link <span class="hljs-comment">#HIDE_IMPLICIT_ONLY&#125; bit set.</span></span><br><span class="line"> */</span><br><span class="line">public boolean hideSoftInputFromWindow(IBinder windowToken, int flags) &#123;</span><br><span class="line">    <span class="hljs-built_in">return</span> hideSoftInputFromWindow(windowToken, flags, null);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>它接收两个参数，第一个参数是一个 IBinder ，可以直接传递一个 View.getWindowToken() 的 windowToken 对象就可以了。而第二个参数，就是隐藏软键盘的标志位，如果没有特殊要求的话，直接传递 0 就好了。<br>注意这里虽然原则上需要传递一个之前弹出键盘传递的时候，传递的 View 的 windowToken ，但是实际情况是你只需要传递一个存在于当前布局 ViewTree 中，随意一个 View 的 windowToken 就可以了。</p><h3 id="切换键盘的弹出和隐藏"><a href="#切换键盘的弹出和隐藏" class="headerlink" title="切换键盘的弹出和隐藏"></a>切换键盘的弹出和隐藏</h3><p>在 InputMethodManager 中，还提供了一个 toggleSoftInput() 方法，如同它的名字一样，它可以让软键盘在显示和隐藏之间切换。<br><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * This method toggles the input method window display.</span><br><span class="line"> *</span><br><span class="line"> * If the input window is already displayed, it gets hidden.</span><br><span class="line"> * If not the input window will be displayed.</span><br><span class="line"> * @param showFlags Provides additional operating flags.  May be</span><br><span class="line"> * 0 or have the &#123;@link <span class="hljs-comment">#SHOW_IMPLICIT&#125;,</span></span><br><span class="line"> * &#123;@link <span class="hljs-comment">#SHOW_FORCED&#125; bit set.</span></span><br><span class="line"> * @param hideFlags Provides additional operating flags.  May be</span><br><span class="line"> * 0 or have the &#123;@link <span class="hljs-comment">#HIDE_IMPLICIT_ONLY&#125;,</span></span><br><span class="line"> * &#123;@link <span class="hljs-comment">#HIDE_NOT_ALWAYS&#125; bit set.</span></span><br><span class="line"> */</span><br><span class="line">public void toggleSoftInput(int showFlags, int hideFlags) &#123;</span><br><span class="line">    <span class="hljs-keyword">if</span> (mCurMethod != null) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            mCurMethod.toggleSoftInput(showFlags, hideFlags);</span><br><span class="line">        &#125; catch (RemoteException e) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>该方法，接收两个 flags ，分别是控制 show 和 hide 时候的标识，它们的含义和前面介绍的 showSoftInput() 和 hideSoftInputFromWindow() 一致，所以没有特殊要求，直接传递 0 就好了。<br>toggleSoftInput() 方法不要求传递一个 View 或者 windowToken，所以它并没有 showSoftInput() 中的一些限制，但是依然还有需要在布局绘制完成之后调用才会有效果。<br>虽然这个方法，限制很少，但是我们基本上不会使用它。主要原因在于，它是一个开关的方法，会根据当前的状态做相反的操作。这就导致很多时候，我们在代码中，无法直接根据 InputMethodManager 提供的方法判断当前软键盘的显示状态，这样也就无法确定调用它的时候的效果了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如果有需要用到输入的地方，通常会有需要自动弹出或者收起软键盘的需求。想要操作软键盘，需要使用到 InputMethodManager ，它是一个系统服务，可以使用 Context.getSystemService() 获取到它。而很多关键的逻辑代码，都是在 InputMethodManagerService 中实现的。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="android软键盘" scheme="/categories/android%E8%BD%AF%E9%94%AE%E7%9B%98/"/>
    
    
      <category term="android" scheme="/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>自己动手封装RecyclerView.Adapter</title>
    <link href="/2019/05/18/%E8%87%AA%E5%B7%B1%E5%8A%A8%E6%89%8B%E5%B0%81%E8%A3%85RecyclerView-Adapter/"/>
    <id>/2019/05/18/自己动手封装RecyclerView-Adapter/</id>
    <published>2019-05-18T03:09:06.000Z</published>
    <updated>2019-05-20T09:35:50.842Z</updated>
    
    <content type="html"><![CDATA[<p>RecyclerView封装了ViewHolder的回收复用，也就是说RecyclerView标准化了ViewHolder，编写Adapter面向的是ViewHolder而不再是View了，复用的逻辑被封装了，写起来更加简单。直接省去了ListView中convertView.setTag(holder)和convertView.getTag()这些繁琐的步骤。<br><a id="more"></a></p><h3 id="提供了一种插拔式的体验，高度的解耦，异常的灵活，针对一个Item的显示RecyclerView专门抽取出了相应的类，来控制Item的显示，使其的扩展性非常强。"><a href="#提供了一种插拔式的体验，高度的解耦，异常的灵活，针对一个Item的显示RecyclerView专门抽取出了相应的类，来控制Item的显示，使其的扩展性非常强。" class="headerlink" title="提供了一种插拔式的体验，高度的解耦，异常的灵活，针对一个Item的显示RecyclerView专门抽取出了相应的类，来控制Item的显示，使其的扩展性非常强。"></a>提供了一种插拔式的体验，高度的解耦，异常的灵活，针对一个Item的显示RecyclerView专门抽取出了相应的类，来控制Item的显示，使其的扩展性非常强。</h3><h3 id="设置布局管理器以控制Item的布局方式，横向、竖向以及瀑布流方式"><a href="#设置布局管理器以控制Item的布局方式，横向、竖向以及瀑布流方式" class="headerlink" title="设置布局管理器以控制Item的布局方式，横向、竖向以及瀑布流方式"></a>设置布局管理器以控制Item的布局方式，横向、竖向以及瀑布流方式</h3><h3 id="可设置Item的间隔样式（可绘制），通过继承RecyclerView的ItemDecoration这个类，然后针对自己的业务需求去书写代码。"><a href="#可设置Item的间隔样式（可绘制），通过继承RecyclerView的ItemDecoration这个类，然后针对自己的业务需求去书写代码。" class="headerlink" title="可设置Item的间隔样式（可绘制），通过继承RecyclerView的ItemDecoration这个类，然后针对自己的业务需求去书写代码。"></a>可设置Item的间隔样式（可绘制），通过继承RecyclerView的ItemDecoration这个类，然后针对自己的业务需求去书写代码。</h3><h3 id="可以控制Item增删的动画，可以通过ItemAnimator这个类进行控制，当然针对增删的动画，RecyclerView有其自己默认的实现。"><a href="#可以控制Item增删的动画，可以通过ItemAnimator这个类进行控制，当然针对增删的动画，RecyclerView有其自己默认的实现。" class="headerlink" title="可以控制Item增删的动画，可以通过ItemAnimator这个类进行控制，当然针对增删的动画，RecyclerView有其自己默认的实现。"></a>可以控制Item增删的动画，可以通过ItemAnimator这个类进行控制，当然针对增删的动画，RecyclerView有其自己默认的实现。</h3><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 自定义封装RecyclerView.Adapter</span><br><span class="line"> */</span><br><span class="line">abstract class RecyclerViewAdapter&lt;M&gt; : RecyclerView.Adapter&lt;RecyclerViewHolder&gt;() &#123;</span><br><span class="line"></span><br><span class="line">    companion object &#123;</span><br><span class="line">        /**</span><br><span class="line">         * 加载中</span><br><span class="line">         */</span><br><span class="line">        private const val LOADING = 0</span><br><span class="line">        /**</span><br><span class="line">         * 加载失败</span><br><span class="line">         */</span><br><span class="line">        private const val LOAD_FAILURE = 1</span><br><span class="line">        /**</span><br><span class="line">         * 全部加载完成</span><br><span class="line">         */</span><br><span class="line">        private const val LOAD_COMPLETE = 2</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    abstract val models: List&lt;M&gt;</span><br><span class="line">    private var isEnableLoadMore: Boolean = <span class="hljs-literal">false</span></span><br><span class="line">    private var mOnLoadMoreListener: OnLoadMoreListener? = null</span><br><span class="line">    private var mOnItemClickListener: OnItemClickListener? = null</span><br><span class="line">    private var mOnItemLongClickListener: OnItemLongClickListener? = null</span><br><span class="line">    private var mLoadStatus: Int = LOADING</span><br><span class="line"></span><br><span class="line">    fun setLoadMoreComplete(hasMore: Boolean) &#123;</span><br><span class="line">        this.isEnableLoadMore = hasMore</span><br><span class="line">        this.mLoadStatus = <span class="hljs-keyword">if</span> (hasMore) LOADING <span class="hljs-keyword">else</span> LOAD_COMPLETE</span><br><span class="line">        notifyDataSetChanged()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fun <span class="hljs-function"><span class="hljs-title">setLoadMoreFailure</span></span>() &#123;</span><br><span class="line">        this.mLoadStatus = LOAD_FAILURE</span><br><span class="line">        notifyItemChanged(itemCount - 1)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fun setOnLoadMoreListener(listener: OnLoadMoreListener) &#123;</span><br><span class="line">        this.mOnLoadMoreListener = listener</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fun setOnItemClickListener(listener: OnItemClickListener) &#123;</span><br><span class="line">        this.mOnItemClickListener = listener</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fun setOnItemLongClickListener(listener: OnItemLongClickListener) &#123;</span><br><span class="line">        this.mOnItemLongClickListener = listener</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    override fun getItemViewType(position: Int): Int &#123;</span><br><span class="line">        <span class="hljs-keyword">if</span> (this.isEnableLoadMore &amp;&amp; position == this.models.size) &#123;</span><br><span class="line">            <span class="hljs-built_in">return</span> R.layout.rv_load_more</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-built_in">return</span> getItemViewLayout(position)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): RecyclerViewHolder &#123;</span><br><span class="line">        val inflater = LayoutInflater.from(parent.context)</span><br><span class="line">        val view = inflater.inflate(viewType, parent, <span class="hljs-literal">false</span>)</span><br><span class="line">        val holder = RecyclerViewHolder(view)</span><br><span class="line">        holder.itemView.setOnClickListener &#123;</span><br><span class="line">            val position = holder.adapterPosition</span><br><span class="line">            <span class="hljs-keyword">if</span> (position != RecyclerView.NO_POSITION) &#123;</span><br><span class="line">                mOnItemClickListener?.onItemClick(it, position)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        holder.itemView.setOnLongClickListener &#123;</span><br><span class="line">            val position = holder.adapterPosition</span><br><span class="line">            <span class="hljs-keyword">if</span> (position != RecyclerView.NO_POSITION) &#123;</span><br><span class="line">                mOnItemLongClickListener?.onItemLongClick(it, position)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="hljs-literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-built_in">return</span> holder</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    override fun getItemCount(): Int &#123;</span><br><span class="line">        <span class="hljs-built_in">return</span> <span class="hljs-keyword">if</span> (this.isEnableLoadMore) this.models.size + 1 <span class="hljs-keyword">else</span> this.models.size</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    override fun onBindViewHolder(holder: RecyclerViewHolder, position: Int) &#123;</span><br><span class="line">        <span class="hljs-keyword">if</span> (getItemViewType(position) == R.layout.rv_load_more) &#123;</span><br><span class="line">            bindLoadMoreViewHolder(holder)</span><br><span class="line">        &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">            convert(holder, this.models[position])</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private fun bindLoadMoreViewHolder(holder: RecyclerViewHolder) &#123;</span><br><span class="line">        holder.setText(R.id.load_status,</span><br><span class="line">                when (this.mLoadStatus) &#123;</span><br><span class="line">                    LOAD_FAILURE -&gt; R.string.load_failure</span><br><span class="line">                    LOAD_COMPLETE -&gt; R.string.load_complete</span><br><span class="line">                    <span class="hljs-keyword">else</span> -&gt; R.string.loading</span><br><span class="line">                &#125;)</span><br><span class="line">                .setVisibility(R.id.load_progress,</span><br><span class="line">                        <span class="hljs-keyword">if</span> (this.mLoadStatus == LOADING) View.VISIBLE <span class="hljs-keyword">else</span> View.GONE)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    override fun onViewAttachedToWindow(holder: RecyclerViewHolder) &#123;</span><br><span class="line">        <span class="hljs-keyword">if</span> (this.isEnableLoadMore &amp;&amp; holder.adapterPosition == itemCount - 1) &#123;</span><br><span class="line">            this.mOnLoadMoreListener?.onLoadMore()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 返回的是当前item的布局id</span><br><span class="line">     */</span><br><span class="line">    protected abstract fun getItemViewLayout(position: Int): Int</span><br><span class="line"></span><br><span class="line">    protected abstract fun convert(holder: RecyclerViewHolder, model: M)</span><br><span class="line"></span><br><span class="line">    interface OnLoadMoreListener &#123;</span><br><span class="line">        fun onLoadMore()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    interface OnItemClickListener &#123;</span><br><span class="line">        fun onItemClick(view: View, position: Int)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    interface OnItemLongClickListener &#123;</span><br><span class="line">        fun onItemLongClick(view: View, position: Int): Boolean</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">open class RecyclerViewHolder(view: View) : RecyclerView.ViewHolder(view) &#123;</span><br><span class="line"></span><br><span class="line">    private val cache = SparseArray&lt;View&gt;()</span><br><span class="line">    val context: Context by lazy &#123; itemView.context &#125;</span><br><span class="line"></span><br><span class="line">    @Suppress(<span class="hljs-string">"UNCHECKED_CAST"</span>)</span><br><span class="line">    fun &lt;V : View&gt; getView(@IdRes id: Int): V &#123;</span><br><span class="line">        var view = cache.get(id)</span><br><span class="line">        <span class="hljs-keyword">if</span> (null == view) &#123;</span><br><span class="line">            view = itemView.findViewById(id)</span><br><span class="line">            cache.put(id, view)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-built_in">return</span> view as V</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fun setText(@IdRes id: Int, @StringRes text: Int): RecyclerViewHolder &#123;</span><br><span class="line">        getView&lt;TextView&gt;(id).setText(text)</span><br><span class="line">        <span class="hljs-built_in">return</span> this</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fun setText(@IdRes id: Int, text: CharSequence): RecyclerViewHolder &#123;</span><br><span class="line">        getView&lt;TextView&gt;(id).text = text</span><br><span class="line">        <span class="hljs-built_in">return</span> this</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fun setImageResource(@IdRes id: Int, @DrawableRes resId: Int): RecyclerViewHolder &#123;</span><br><span class="line">        getView&lt;ImageView&gt;(id).setImageResource(resId)</span><br><span class="line">        <span class="hljs-built_in">return</span> this</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fun setImageBitmap(@IdRes id: Int, bitmap: Bitmap): RecyclerViewHolder &#123;</span><br><span class="line">        getView&lt;ImageView&gt;(id).setImageBitmap(bitmap)</span><br><span class="line">        <span class="hljs-built_in">return</span> this</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fun setBackgroundColor(@IdRes id: Int, @ColorInt color: Int): RecyclerViewHolder &#123;</span><br><span class="line">        getView&lt;View&gt;(id).setBackgroundColor(color)</span><br><span class="line">        <span class="hljs-built_in">return</span> this</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fun setBackgroundResource(@IdRes id: Int, @DrawableRes resId: Int): RecyclerViewHolder &#123;</span><br><span class="line">        getView&lt;View&gt;(id).setBackgroundResource(resId)</span><br><span class="line">        <span class="hljs-built_in">return</span> this</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fun setVisibility(@IdRes id: Int, visibility: Int): RecyclerViewHolder &#123;</span><br><span class="line">        getView&lt;View&gt;(id).visibility = visibility</span><br><span class="line">        <span class="hljs-built_in">return</span> this</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fun setEnable(@IdRes id: Int, <span class="hljs-built_in">enable</span>: Boolean): RecyclerViewHolder &#123;</span><br><span class="line">        getView&lt;View&gt;(id).isEnabled = <span class="hljs-built_in">enable</span></span><br><span class="line">        <span class="hljs-built_in">return</span> this</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;RecyclerView封装了ViewHolder的回收复用，也就是说RecyclerView标准化了ViewHolder，编写Adapter面向的是ViewHolder而不再是View了，复用的逻辑被封装了，写起来更加简单。直接省去了ListView中convertView.setTag(holder)和convertView.getTag()这些繁琐的步骤。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="android" scheme="/categories/android/"/>
    
    
      <category term="android" scheme="/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>自定义LiveDataBus事件分发</title>
    <link href="/2019/05/17/%E8%87%AA%E5%AE%9A%E4%B9%89LiveDataBus%E4%BA%8B%E4%BB%B6%E5%88%86%E5%8F%91/"/>
    <id>/2019/05/17/自定义LiveDataBus事件分发/</id>
    <published>2019-05-17T12:31:36.000Z</published>
    <updated>2019-05-20T09:35:50.841Z</updated>
    
    <content type="html"><![CDATA[<p>对于Android系统来说，消息传递是最基本的组件，每一个App内的不同页面，不同组件都在进行消息传递。消息传递既可以用于Android四大组件之间的通信，也可用于异步线程和主线程之间的通信。对于Android开发者来说，经常使用的消息传递方式有很多种，从最早使用的Handler、BroadcastReceiver、接口回调，到近几年流行的通信总线类框架EventBus、RxBus。Android消息传递框架，总在不断的演进之中。<br><a id="more"></a></p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">class LiveDataBus private <span class="hljs-function"><span class="hljs-title">constructor</span></span>() &#123;</span><br><span class="line"></span><br><span class="line">    private val mCaches = HashMap&lt;String, MutableLiveData&lt;Any&gt;&gt;()</span><br><span class="line"></span><br><span class="line">    companion object &#123;</span><br><span class="line">        val with by lazy(LazyThreadSafetyMode.SYNCHRONIZED) &#123; LiveDataBus() &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fun &lt;T&gt; get(owner: LifecycleOwner, target: String, onChange: (T?) -&gt; Unit) &#123;</span><br><span class="line">        <span class="hljs-keyword">if</span> (!mCaches.containsKey(target)) &#123;</span><br><span class="line">            mCaches[target] = MutableLiveData()</span><br><span class="line">        &#125;</span><br><span class="line">        mCaches[target]?.<span class="hljs-built_in">let</span> &#123; liveData -&gt;</span><br><span class="line">            (liveData as MutableLiveData&lt;T&gt;).observe(owner, Observer &#123; onChange(it) &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fun post(target: String, value: Any) &#123;</span><br><span class="line">        <span class="hljs-keyword">if</span> (mCaches.containsKey(target)) &#123;</span><br><span class="line">            mCaches[target]?.postValue(value)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;对于Android系统来说，消息传递是最基本的组件，每一个App内的不同页面，不同组件都在进行消息传递。消息传递既可以用于Android四大组件之间的通信，也可用于异步线程和主线程之间的通信。对于Android开发者来说，经常使用的消息传递方式有很多种，从最早使用的Handler、BroadcastReceiver、接口回调，到近几年流行的通信总线类框架EventBus、RxBus。Android消息传递框架，总在不断的演进之中。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="android" scheme="/categories/android/"/>
    
    
      <category term="android" scheme="/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>ContentProvider共享手机sd卡中的资源文件</title>
    <link href="/2019/05/17/ContentProvider%E5%85%B1%E4%BA%AB%E6%89%8B%E6%9C%BAsd%E5%8D%A1%E4%B8%AD%E7%9A%84%E8%B5%84%E6%BA%90%E6%96%87%E4%BB%B6/"/>
    <id>/2019/05/17/ContentProvider共享手机sd卡中的资源文件/</id>
    <published>2019-05-17T11:55:08.000Z</published>
    <updated>2019-05-20T09:35:50.840Z</updated>
    
    <content type="html"><![CDATA[<p>ContentProvider通过uri来标识其它应用要访问的数据，通过ContentResolver的增、删、改、查方法实现对共享数据的操作。还可以通过注册ContentObserver来监听数据是否发生了变化来对应的刷新页面。<br><a id="more"></a><br>通过ContentResolver加载手机中的文件<br><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">abstract class LocalStorageLoader&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">    protected abstract val context: Context</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * using the content:// scheme, <span class="hljs-keyword">for</span> the content to retrieve.</span><br><span class="line">     */</span><br><span class="line">    protected abstract fun getUri(): Uri</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * A list of <span class="hljs-built_in">which</span> columns to <span class="hljs-built_in">return</span>. Passing null will</span><br><span class="line">     * <span class="hljs-built_in">return</span> all columns, <span class="hljs-built_in">which</span> is inefficient.</span><br><span class="line">     */</span><br><span class="line">    protected abstract fun getProjection(): Array&lt;String&gt;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * A filter declaring <span class="hljs-built_in">which</span> rows to <span class="hljs-built_in">return</span>, formatted as an</span><br><span class="line">     * SQL WHERE clause (excluding the WHERE itself). Passing null will</span><br><span class="line">     * <span class="hljs-built_in">return</span> all rows <span class="hljs-keyword">for</span> the given URI.</span><br><span class="line">     */</span><br><span class="line">    protected abstract fun getSelection(): String?</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * You may include ?s <span class="hljs-keyword">in</span> selection, <span class="hljs-built_in">which</span> will be</span><br><span class="line">     * replaced by the values from selectionArgs, <span class="hljs-keyword">in</span> the order that they</span><br><span class="line">     * appear <span class="hljs-keyword">in</span> the selection. The values will be bound as Strings.</span><br><span class="line">     */</span><br><span class="line">    protected abstract fun getSelectionArgs(): Array&lt;String&gt;?</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * How to order the rows, formatted as an SQL ORDER BY</span><br><span class="line">     * clause (excluding the ORDER BY itself). Passing null will use the</span><br><span class="line">     * default sort order, <span class="hljs-built_in">which</span> may be unordered.</span><br><span class="line">     */</span><br><span class="line">    protected abstract fun getSortOrder(): String?</span><br><span class="line"></span><br><span class="line">    protected abstract fun parse(cursor: Cursor): T?</span><br><span class="line"></span><br><span class="line">    fun query(): List&lt;T&gt; &#123;</span><br><span class="line">        val models = ArrayList&lt;T&gt;()</span><br><span class="line">        val resolver = context.contentResolver</span><br><span class="line">        val cursor = resolver.query(getUri(), getProjection(), getSelection(), getSelectionArgs(), getSortOrder())</span><br><span class="line">        cursor?.<span class="hljs-built_in">let</span> &#123;</span><br><span class="line">            <span class="hljs-keyword">while</span> (it.moveToNext()) &#123;</span><br><span class="line">                val data = parse(cursor)</span><br><span class="line">                <span class="hljs-keyword">if</span> (null != data) &#123;</span><br><span class="line">                    models.add(data)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="hljs-keyword">if</span> (!it.isClosed) &#123;</span><br><span class="line">                it.close()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-built_in">return</span> models</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>加载sd卡中的所有jpg,png,gif图片<br><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">class DefaultImageLoader(override val context: Context) : LocalStorageLoader&lt;FileInfo&gt;() &#123;</span><br><span class="line"></span><br><span class="line">        override fun getUri(): Uri &#123;</span><br><span class="line">            <span class="hljs-built_in">return</span> MediaStore.Images.Media.EXTERNAL_CONTENT_URI</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        override fun getProjection(): Array&lt;String&gt; &#123;</span><br><span class="line">            <span class="hljs-built_in">return</span> arrayOf(</span><br><span class="line">                    MediaStore.Images.Media.DATA,</span><br><span class="line">                    MediaStore.Images.Media.MIME_TYPE,</span><br><span class="line">                    MediaStore.Images.Media.BUCKET_ID,</span><br><span class="line">                    MediaStore.Images.Media.BUCKET_DISPLAY_NAME,</span><br><span class="line">                    MediaStore.Images.Media.DATE_TAKEN,</span><br><span class="line">                    MediaStore.Images.Media.SIZE,</span><br><span class="line">                    MediaStore.Images.Media.DISPLAY_NAME</span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        override fun getSelection(): String? &#123;</span><br><span class="line">            <span class="hljs-built_in">return</span> MediaStore.Images.Media.MIME_TYPE + <span class="hljs-string">"=? or "</span> + MediaStore.Images.Media.MIME_TYPE + <span class="hljs-string">"=? or "</span> + MediaStore.Images.Media.MIME_TYPE + <span class="hljs-string">"=?"</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        override fun getSelectionArgs(): Array&lt;String&gt;? &#123;</span><br><span class="line">            <span class="hljs-built_in">return</span> arrayOf(<span class="hljs-string">"image/jpeg"</span>, <span class="hljs-string">"image/png"</span>, <span class="hljs-string">"image/gif"</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        override fun getSortOrder(): String? &#123;</span><br><span class="line">            <span class="hljs-built_in">return</span> MediaStore.Images.Media.DATE_TAKEN + <span class="hljs-string">" desc"</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        override fun parse(cursor: Cursor): FileInfo? &#123;</span><br><span class="line">            val localPath = cursor.getString(cursor.getColumnIndex(MediaStore.Images.Media.DATA))</span><br><span class="line">            val mimeType = cursor.getString(cursor.getColumnIndex(MediaStore.Images.Media.MIME_TYPE))</span><br><span class="line">            val parentId = cursor.getString(cursor.getColumnIndex(MediaStore.Images.Media.BUCKET_ID))</span><br><span class="line">            val parentName = cursor.getString(cursor.getColumnIndex(MediaStore.Images.Media.BUCKET_DISPLAY_NAME))</span><br><span class="line">            val dateToken = cursor.getLong(cursor.getColumnIndex(MediaStore.Images.Media.DATE_TAKEN))</span><br><span class="line">            val length = cursor.getLong(cursor.getColumnIndex(MediaStore.Images.Media.SIZE))</span><br><span class="line">            val displayName = cursor.getString(cursor.getColumnIndex(MediaStore.Images.Media.DISPLAY_NAME))</span><br><span class="line">            <span class="hljs-keyword">if</span> (!TextUtils.isEmpty(localPath) &amp;&amp; length &gt; 10240) &#123;</span><br><span class="line">                val options = BitmapFactory.Options()</span><br><span class="line">                options.inJustDecodeBounds = <span class="hljs-literal">true</span></span><br><span class="line">                BitmapFactory.decodeFile(localPath, options)</span><br><span class="line">                <span class="hljs-built_in">return</span> FileInfo(displayName, localPath, length, 0, dateToken, options.outWidth, options.outHeight, mimeType, parentId, parentName)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="hljs-built_in">return</span> null</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>加载sd卡中的所有mp4视频<br><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">class DefaultVideoLoader(override val context: Context) : LocalStorageLoader&lt;FileInfo&gt;() &#123;</span><br><span class="line"></span><br><span class="line">        override fun getUri(): Uri &#123;</span><br><span class="line">            <span class="hljs-built_in">return</span> MediaStore.Video.Media.EXTERNAL_CONTENT_URI</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        override fun getProjection(): Array&lt;String&gt; &#123;</span><br><span class="line">            <span class="hljs-built_in">return</span> arrayOf(</span><br><span class="line">                    MediaStore.Video.Media.DATA,</span><br><span class="line">                    MediaStore.Video.Media.MIME_TYPE,</span><br><span class="line">                    MediaStore.Video.Media.BUCKET_ID,</span><br><span class="line">                    MediaStore.Video.Media.BUCKET_DISPLAY_NAME,</span><br><span class="line">                    MediaStore.Video.Media.DURATION,</span><br><span class="line">                    MediaStore.Video.Media.DATE_TAKEN,</span><br><span class="line">                    MediaStore.Video.Media.SIZE,</span><br><span class="line">                    MediaStore.Video.Media.DISPLAY_NAME</span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        override fun getSelection(): String? &#123;</span><br><span class="line">            <span class="hljs-built_in">return</span> MediaStore.Images.Media.MIME_TYPE + <span class="hljs-string">"=?"</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        override fun getSelectionArgs(): Array&lt;String&gt;? &#123;</span><br><span class="line">            <span class="hljs-built_in">return</span> arrayOf(<span class="hljs-string">"video/mp4"</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        override fun getSortOrder(): String? &#123;</span><br><span class="line">            <span class="hljs-built_in">return</span> MediaStore.Video.Media.DATE_TAKEN + <span class="hljs-string">" desc"</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        override fun parse(cursor: Cursor): FileInfo? &#123;</span><br><span class="line">            val localPath = cursor.getString(cursor.getColumnIndex(MediaStore.Video.Media.DATA))</span><br><span class="line">            val mimeType = cursor.getString(cursor.getColumnIndex(MediaStore.Video.Media.MIME_TYPE))</span><br><span class="line">            val parentId = cursor.getString(cursor.getColumnIndex(MediaStore.Video.Media.BUCKET_ID))</span><br><span class="line">            val parentName = cursor.getString(cursor.getColumnIndex(MediaStore.Video.Media.BUCKET_DISPLAY_NAME))</span><br><span class="line">            val dateToken = cursor.getLong(cursor.getColumnIndex(MediaStore.Video.Media.DATE_TAKEN))</span><br><span class="line">            val duration = cursor.getLong(cursor.getColumnIndex(MediaStore.Video.Media.DURATION))</span><br><span class="line">            val length = cursor.getLong(cursor.getColumnIndex(MediaStore.Video.Media.SIZE))</span><br><span class="line">            val displayName = cursor.getString(cursor.getColumnIndex(MediaStore.Video.Media.DISPLAY_NAME))</span><br><span class="line">            <span class="hljs-keyword">if</span> (!TextUtils.isEmpty(localPath) &amp;&amp; length &gt; 10240) &#123;</span><br><span class="line">                <span class="hljs-built_in">return</span> FileInfo(displayName, localPath, length, duration, dateToken, 0, 0, mimeType, parentId, parentName)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="hljs-built_in">return</span> null</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ContentProvider通过uri来标识其它应用要访问的数据，通过ContentResolver的增、删、改、查方法实现对共享数据的操作。还可以通过注册ContentObserver来监听数据是否发生了变化来对应的刷新页面。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="android" scheme="/categories/android/"/>
    
    
      <category term="android" scheme="/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>Charles</title>
    <link href="/2019/04/26/Charles/"/>
    <id>/2019/04/26/Charles/</id>
    <published>2019-04-26T07:21:40.000Z</published>
    <updated>2019-05-20T09:35:50.840Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.charlesproxy.com/latest-release/download.do" target="_blank" rel="noopener">https://www.charlesproxy.com/latest-release/download.do</a></p><pre><code>Registered Name: https://zhile.ioLicense Key: 48891cf209c6d32bf4</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://www.charlesproxy.com/latest-release/download.do&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.charlesproxy.com/latest-rele
      
    
    </summary>
    
    
      <category term="http" scheme="/tags/http/"/>
    
  </entry>
  
  <entry>
    <title>AndroidStudio插件</title>
    <link href="/2019/04/02/AndroidStudio%E6%8F%92%E4%BB%B6/"/>
    <id>/2019/04/02/AndroidStudio插件/</id>
    <published>2019-04-02T03:21:32.000Z</published>
    <updated>2019-05-20T09:35:50.833Z</updated>
    
    <content type="html"><![CDATA[<h3 id="CodeGlance"><a href="#CodeGlance" class="headerlink" title="CodeGlance"></a>CodeGlance</h3><p>在右边可以预览代码，实现快速定位</p><h3 id="Alibaba-Java-Coding-Guidelines"><a href="#Alibaba-Java-Coding-Guidelines" class="headerlink" title="Alibaba Java Coding Guidelines"></a>Alibaba Java Coding Guidelines</h3><p>阿里出的一个代码编写规范检测的插件。<br><a id="more"></a></p><h3 id="LayoutFormatter"><a href="#LayoutFormatter" class="headerlink" title="LayoutFormatter"></a>LayoutFormatter</h3><p>此插件是XML格式化插件，自动排序，能够根据正确的排序顺序进行排序。<br><img src="/2019/04/02/AndroidStudio插件/2650372-b3d1e3ea41769798.png"></p><h3 id="android-selector-intellij-plugin"><a href="#android-selector-intellij-plugin" class="headerlink" title="android-selector-intellij-plugin"></a>android-selector-intellij-plugin</h3><p>插件生成normal，press和按下水波纹颜色<br>下载地址：<a href="https://github.com/importre/android-selector-intellij-plugin" target="_blank" rel="noopener">https://github.com/importre/android-selector-intellij-plugin</a></p><h3 id="Android-Drawable-Importer"><a href="#Android-Drawable-Importer" class="headerlink" title="Android Drawable Importer"></a>Android Drawable Importer</h3><p>这个插件能够根据导入的图片，自动生成对应分辨率的图片，比如放入一张图片，他能够生成对应的mdpi,hdpi,xhdpi,xxhdpi,xxxhdpi分辨率的图片，并且当你需要删除一个图片的时候，可以连带的删除其他分辨率对应的图片，不用重复删除。<br>下载地址：<a href="https://github.com/winterDroid/android-drawable-importer-intellij-plugin" target="_blank" rel="noopener">https://github.com/winterDroid/android-drawable-importer-intellij-plugin</a><br><img src="/2019/04/02/AndroidStudio插件/2650372-1f36618f5337f562.gif"></p><h3 id="ECTranslation"><a href="#ECTranslation" class="headerlink" title="ECTranslation"></a>ECTranslation</h3><p>这是一个可以对AndroidStudio中的英文进行翻译的一个插件，以后看源码的时候，就不用再去查字典了，方便多了，也可自定义快捷键。<br>下载地址：<a href="https://github.com/Skykai521/ECTranslation" target="_blank" rel="noopener">https://github.com/Skykai521/ECTranslation</a><br><img src="/2019/04/02/AndroidStudio插件/2650372-625763d433f4ab1c.png"></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;CodeGlance&quot;&gt;&lt;a href=&quot;#CodeGlance&quot; class=&quot;headerlink&quot; title=&quot;CodeGlance&quot;&gt;&lt;/a&gt;CodeGlance&lt;/h3&gt;&lt;p&gt;在右边可以预览代码，实现快速定位&lt;/p&gt;
&lt;h3 id=&quot;Alibaba-Java-Coding-Guidelines&quot;&gt;&lt;a href=&quot;#Alibaba-Java-Coding-Guidelines&quot; class=&quot;headerlink&quot; title=&quot;Alibaba Java Coding Guidelines&quot;&gt;&lt;/a&gt;Alibaba Java Coding Guidelines&lt;/h3&gt;&lt;p&gt;阿里出的一个代码编写规范检测的插件。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="android" scheme="/categories/android/"/>
    
    
      <category term="android" scheme="/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>git常用配置</title>
    <link href="/2019/04/01/git%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE/"/>
    <id>/2019/04/01/git常用配置/</id>
    <published>2019-04-01T13:22:05.000Z</published>
    <updated>2019-05-20T09:35:50.840Z</updated>
    
    <content type="html"><![CDATA[<p>Git是一个开源的分布式版本控制系统，可以有效、高速地处理从很小到非常大的项目版本管理。<br><a id="more"></a><br><strong>保存账号和密码</strong><br><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global credential.helper store</span><br></pre></td></tr></table></figure></p><p><strong>忽略ssl验证</strong></p><pre><code class="bash">git config --global http.sslVerify <span class="string">"false"</span></code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Git是一个开源的分布式版本控制系统，可以有效、高速地处理从很小到非常大的项目版本管理。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="git" scheme="/categories/git/"/>
    
    
      <category term="git" scheme="/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>jdk的安装与环境配置</title>
    <link href="/2019/04/01/jdk%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    <id>/2019/04/01/jdk的安装与环境配置/</id>
    <published>2019-04-01T12:56:35.000Z</published>
    <updated>2019-05-20T09:35:50.841Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.oracle.com/technetwork/java/javase/downloads/index.html" target="_blank" rel="noopener">https://www.oracle.com/technetwork/java/javase/downloads/index.html</a></p><h3 id="Mac"><a href="#Mac" class="headerlink" title="Mac"></a>Mac</h3><p>1.打开终端Terminal<br>2.vim .bash_profile<br>3.输入如下配置,然后wq保存关闭该窗口<br><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_191.jdk/Contents/Home</span><br><span class="line">PATH=<span class="hljs-variable">$JAVA_HOME</span>/bin:<span class="hljs-variable">$PATH</span>:.</span><br><span class="line">CLASSPATH=<span class="hljs-variable">$JAVA_HOME</span>/lib/tools.jar:<span class="hljs-variable">$JAVA_HOME</span>/lib/dt.jar:.</span><br><span class="line"><span class="hljs-built_in">export</span> JAVA_HOME</span><br><span class="line"><span class="hljs-built_in">export</span> PATH</span><br><span class="line"><span class="hljs-built_in">export</span> CLASSPATH</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>4.使用”source .bash_profile”使配置生效</p><h3 id="Ubuntu"><a href="#Ubuntu" class="headerlink" title="Ubuntu"></a>Ubuntu</h3><p>1.打开终端Terminal<br>2.sudo vim /etc/profile<br>3.输入如下配置,然后wq保存关闭该窗口<br><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">export</span> JAVA_HOME=/usr/lib/jdk/jdk1.8.0_191</span><br><span class="line"><span class="hljs-built_in">export</span> JRE_HOME=<span class="hljs-variable">$&#123;JAVA_HOME&#125;</span>/jre    </span><br><span class="line"><span class="hljs-built_in">export</span> CLASSPATH=.:<span class="hljs-variable">$&#123;JAVA_HOME&#125;</span>/lib:<span class="hljs-variable">$&#123;JRE_HOME&#125;</span>/lib    </span><br><span class="line"><span class="hljs-built_in">export</span> PATH=<span class="hljs-variable">$&#123;JAVA_HOME&#125;</span>/bin:<span class="hljs-variable">$PATH</span></span><br></pre></td></tr></table></figure></p><p>4.使用”source /etc/profile”使配置生效</p><h3 id="Window"><a href="#Window" class="headerlink" title="Window"></a>Window</h3><p>1.新建系统变量：JAVA_HOME=C:\Program Files\Java\jdk1.8.0_191<br>2.在系统变量Path后面追加;%JAVA_HOME%\bin<br>3.新建系统变量：CLASSPATH=.;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://www.oracle.com/technetwork/java/javase/downloads/index.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.oracle.com/technetwork/java/javase/downloads/index.html&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Mac&quot;&gt;&lt;a href=&quot;#Mac&quot; class=&quot;headerlink&quot; title=&quot;Mac&quot;&gt;&lt;/a&gt;Mac&lt;/h3&gt;&lt;p&gt;1.打开终端Terminal&lt;br&gt;2.vim .bash_profile&lt;br&gt;3.输入如下配置,然后wq保存关闭该窗口&lt;br&gt;&lt;figure class=&quot;highlight bash hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_191.jdk/Contents/Home&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;PATH=&lt;span class=&quot;hljs-variable&quot;&gt;$JAVA_HOME&lt;/span&gt;/bin:&lt;span class=&quot;hljs-variable&quot;&gt;$PATH&lt;/span&gt;:.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;CLASSPATH=&lt;span class=&quot;hljs-variable&quot;&gt;$JAVA_HOME&lt;/span&gt;/lib/tools.jar:&lt;span class=&quot;hljs-variable&quot;&gt;$JAVA_HOME&lt;/span&gt;/lib/dt.jar:.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;export&lt;/span&gt; JAVA_HOME&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;export&lt;/span&gt; PATH&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;export&lt;/span&gt; CLASSPATH&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="/categories/java/"/>
    
    
      <category term="java" scheme="/tags/java/"/>
    
  </entry>
  
</feed>
